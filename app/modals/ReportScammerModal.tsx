import React, { useState } from 'react';
import { 
  StyleSheet, 
  View, 
  Text, 
  TextInput, 
  Pressable, 
  Modal, 
  ScrollView, 
  KeyboardAvoidingView, 
  Platform,
  ActivityIndicator,
  Alert,
  SafeAreaView,
  StatusBar
} from 'react-native';
import { useLocalSearchParams, useRouter } from 'expo-router';
import { MaterialIcons } from '@expo/vector-icons';
import { Colors } from '@/constants/Colors';
import api from '@/app/services/api';

const { scammersApi } = api;

const ERROR_COLOR = '#FF3B30'; 

export default function ReportScammerModal() {
  const colors = Colors.light;
  const [isLoading, setIsLoading] = useState(false);
  const router = useRouter();
  
  const [name, setName] = useState('');
  const [type, setType] = useState<'phone' | 'online' | 'financial' | 'other'>('phone');
  const [description, setDescription] = useState('');
  const [contactInfo, setContactInfo] = useState('');
  const [additionalInfo, setAdditionalInfo] = useState('');
  
  const [reporterInfo, setReporterInfo] = useState({
    fullName: '',
    contactPhone: ''
  });
  
  const [errors, setErrors] = useState<{[key: string]: string}>({});
  
  const validateForm = () => {
    const newErrors: {[key: string]: string} = {};
    
    if (!name.trim()) {
      newErrors.name = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ';
    }
    
    if (!description.trim()) {
      newErrors.description = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ';
    }
    
    if (!contactInfo.trim()) {
      newErrors.contactInfo = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é';
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };
  
  const handleSubmit = async () => {
    if (!validateForm()) {
      return;
    }
    
    setIsLoading(true);
    
    try {
      const requestId = Date.now().toString(36) + Math.random().toString(36).substring(2);
      console.log(`üöÄ Submitting scammer report (ID: ${requestId})`);
      
      const scammerData = {
        name,
        type,
        description,
        contactInfo,
        additionalInfo: additionalInfo.trim() ? additionalInfo : undefined,
        
        reporterInfo: {
          fullName: reporterInfo.fullName.trim(),
          contactPhone: reporterInfo.contactPhone.trim(),
        },
        
        _requestId: requestId 
      };
      
      console.log(`üì§ Sending data (ID: ${requestId}):`, scammerData);
      const response = await scammersApi.reportScammer(scammerData);
      console.log(`üì• Received response (ID: ${requestId}):`, response);
      
      setIsLoading(false);
      
      const message = response.message || '–û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ';
      
      Alert.alert(
        '–û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω',
        message,
        [
          { 
            text: 'OK', 
            onPress: () => {
              resetForm();
              router.back();
            }
          }
        ]
      );
    } catch (error: any) {
      console.error('Error reporting scammer:', error);
      setIsLoading(false);
      
      let errorMessage = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
      
      if (error.response) {
        console.error('Server responded with error:', error.response.status, error.response.data);
        errorMessage = `–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${error.response.status}. ${error.response.data?.message || ''}`;
      } else if (error.request) {
        console.error('Network error - no response:', error.request);
        errorMessage = '–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω.';
      } else {
        console.error('Request setup error:', error.message);
        errorMessage = `–û—à–∏–±–∫–∞: ${error.message}`;
      }
      
      Alert.alert(
        '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏',
        errorMessage,
        [{ text: 'OK' }]
      );
    }
  };
  
  const resetForm = () => {
    setName('');
    setType('phone');
    setDescription('');
    setContactInfo('');
    setAdditionalInfo('');
    setReporterInfo({
      fullName: '',
      contactPhone: ''
    });
    setErrors({});
  };
  
  const handleClose = () => {
    resetForm();
    router.back();
  };
  
  return (
    <SafeAreaView style={styles.container}>
      <StatusBar barStyle="dark-content" />
      <KeyboardAvoidingView
        style={styles.keyboardView}
        behavior={Platform.OS === 'ios' ? 'padding' : undefined}
      >
        <View style={[styles.modalContent, { backgroundColor: colors.background }]}>
          <View style={styles.header}>
            <Text style={[styles.title, { color: colors.text }]}>
              –°–æ–æ–±—â–∏—Ç—å –æ –º–æ—à–µ–Ω–Ω–∏–∫–µ
            </Text>
            <Pressable onPress={handleClose}>
              <MaterialIcons name="close" size={24} color={colors.text} />
            </Pressable>
          </View>
          
          <ScrollView style={styles.scrollView} contentContainerStyle={styles.formContainer}>
            <Text style={[styles.subtitle, { color: colors.muted }]}>
              –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É, —á—Ç–æ–±—ã —Å–æ–æ–±—â–∏—Ç—å –æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–ª–∏ –æ –º–æ—à–µ–Ω–Ω–∏–∫–µ. –í–∞—à –æ—Ç—á–µ—Ç –ø–æ–º–æ–∂–µ—Ç –¥—Ä—É–≥–∏–º –∏–∑–±–µ–∂–∞—Ç—å –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞.
            </Text>
            
            <View style={styles.sectionHeader}>
              <Text style={[styles.sectionTitle, { color: colors.text }]}>
                –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ—à–µ–Ω–Ω–∏–∫–µ
              </Text>
              <Text style={[styles.requiredInfoText, { color: colors.muted }]}>
                (* - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è)
              </Text>
            </View>
            
            <View style={styles.formGroup}>
              <Text style={[styles.label, { color: colors.text }]}>
                –ò–º—è/–Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ—à–µ–Ω–Ω–∏–∫–∞ –∏–ª–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏*
              </Text>
              <TextInput
                style={[
                  styles.input, 
                  { 
                    borderColor: errors.name ? ERROR_COLOR : colors.border,
                    color: colors.text,
                    backgroundColor: colors.subtleBg
                  }
                ]}
                value={name}
                onChangeText={setName}
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –¢–û–û '–ò–Ω–≤–µ—Å—Ç –ü–ª—é—Å'"
                placeholderTextColor={colors.muted}
              />
              {errors.name && (
                <Text style={[styles.errorText, { color: ERROR_COLOR }]}>
                  {errors.name}
                </Text>
              )}
            </View>
            
            <View style={styles.formGroup}>
              <Text style={[styles.label, { color: colors.text }]}>
                –¢–∏–ø –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞*
              </Text>
              <View style={styles.typeButtons}>
                <Pressable
                  style={[
                    styles.typeButton,
                    type === 'phone' && [styles.activeTypeButton, { borderColor: colors.tint }]
                  ]}
                  onPress={() => setType('phone')}
                >
                  <MaterialIcons 
                    name="phone" 
                    size={20} 
                    color={type === 'phone' ? colors.tint : colors.muted} 
                  />
                  <Text 
                    style={[
                      styles.typeButtonText, 
                      { color: type === 'phone' ? colors.tint : colors.muted }
                    ]}
                  >
                    –¢–µ–ª–µ—Ñ–æ–Ω–Ω–æ–µ
                  </Text>
                </Pressable>
                
                <Pressable
                  style={[
                    styles.typeButton,
                    type === 'online' && [styles.activeTypeButton, { borderColor: colors.tint }]
                  ]}
                  onPress={() => setType('online')}
                >
                  <MaterialIcons 
                    name="computer" 
                    size={20} 
                    color={type === 'online' ? colors.tint : colors.muted} 
                  />
                  <Text 
                    style={[
                      styles.typeButtonText, 
                      { color: type === 'online' ? colors.tint : colors.muted }
                    ]}
                  >
                    –ò–Ω—Ç–µ—Ä–Ω–µ—Ç
                  </Text>
                </Pressable>
                
                <Pressable
                  style={[
                    styles.typeButton,
                    type === 'financial' && [styles.activeTypeButton, { borderColor: colors.tint }]
                  ]}
                  onPress={() => setType('financial')}
                >
                  <MaterialIcons 
                    name="attach-money" 
                    size={20} 
                    color={type === 'financial' ? colors.tint : colors.muted} 
                  />
                  <Text 
                    style={[
                      styles.typeButtonText, 
                      { color: type === 'financial' ? colors.tint : colors.muted }
                    ]}
                  >
                    –§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ
                  </Text>
                </Pressable>
                
                <Pressable
                  style={[
                    styles.typeButton,
                    type === 'other' && [styles.activeTypeButton, { borderColor: colors.tint }]
                  ]}
                  onPress={() => setType('other')}
                >
                  <MaterialIcons 
                    name="warning" 
                    size={20} 
                    color={type === 'other' ? colors.tint : colors.muted} 
                  />
                  <Text 
                    style={[
                      styles.typeButtonText, 
                      { color: type === 'other' ? colors.tint : colors.muted }
                    ]}
                  >
                    –î—Ä—É–≥–æ–µ
                  </Text>
                </Pressable>
              </View>
            </View>
            
            <View style={styles.formGroup}>
              <Text style={[styles.label, { color: colors.text }]}>
                –û–ø–∏—Å–∞–Ω–∏–µ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞*
              </Text>
              <TextInput
                style={[
                  styles.input, 
                  styles.textArea,
                  { 
                    borderColor: errors.description ? ERROR_COLOR : colors.border,
                    color: colors.text,
                    backgroundColor: colors.subtleBg
                  }
                ]}
                value={description}
                onChangeText={setDescription}
                placeholder="–û–ø–∏—à–∏—Ç–µ –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ö–µ–º–∞ –∏ –∫–∞–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –º–æ—à–µ–Ω–Ω–∏–∫–∞"
                placeholderTextColor={colors.muted}
                multiline
                numberOfLines={4}
                textAlignVertical="top"
              />
              {errors.description && (
                <Text style={[styles.errorText, { color: ERROR_COLOR }]}>
                  {errors.description}
                </Text>
              )}
            </View>
            
            <View style={styles.formGroup}>
              <Text style={[styles.label, { color: colors.text }]}>
                –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –º–æ—à–µ–Ω–Ω–∏–∫–∞*
              </Text>
              <TextInput
                style={[
                  styles.input, 
                  { 
                    borderColor: errors.contactInfo ? ERROR_COLOR : colors.border,
                    color: colors.text,
                    backgroundColor: colors.subtleBg
                  }
                ]}
                value={contactInfo}
                onChangeText={setContactInfo}
                placeholder="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, email, —Å–∞–π—Ç, –∞–¥—Ä–µ—Å –∏ —Ç.–¥."
                placeholderTextColor={colors.muted}
              />
              {errors.contactInfo && (
                <Text style={[styles.errorText, { color: ERROR_COLOR }]}>
                  {errors.contactInfo}
                </Text>
              )}
            </View>
            
            <View style={styles.sectionHeader}>
              <Text style={[styles.sectionTitle, { color: colors.text }]}>
                –í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
              </Text>
              <Text style={[styles.optionalInfoText, { color: colors.muted }]}>
                (–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
              </Text>
            </View>
            
            <View style={styles.formGroup}>
              <Text style={[styles.label, { color: colors.text }]}>
                –í–∞—à–µ –∏–º—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
              </Text>
              <TextInput
                style={[
                  styles.input, 
                  { 
                    borderColor: colors.border,
                    color: colors.text,
                    backgroundColor: colors.subtleBg
                  }
                ]}
                value={reporterInfo.fullName}
                onChangeText={(text) => setReporterInfo({...reporterInfo, fullName: text})}
                placeholder="–í–∞—à–µ –∏–º—è"
                placeholderTextColor={colors.muted}
              />
            </View>
            
            <View style={styles.formGroup}>
              <Text style={[styles.label, { color: colors.text }]}>
                –í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
              </Text>
              <TextInput
                style={[
                  styles.input, 
                  { 
                    borderColor: colors.border,
                    color: colors.text,
                    backgroundColor: colors.subtleBg
                  }
                ]}
                value={reporterInfo.contactPhone}
                onChangeText={(text) => setReporterInfo({...reporterInfo, contactPhone: text})}
                placeholder="+7 (XXX) XXX-XXXX"
                placeholderTextColor={colors.muted}
                keyboardType="phone-pad"
              />
            </View>
            
            <View style={styles.formGroup}>
              <Text style={[styles.label, { color: colors.text }]}>
                –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
              </Text>
              <TextInput
                style={[
                  styles.input, 
                  styles.textArea,
                  { 
                    borderColor: colors.border,
                    color: colors.text,
                    backgroundColor: colors.subtleBg
                  }
                ]}
                value={additionalInfo}
                onChangeText={setAdditionalInfo}
                placeholder="–õ—é–±–∞—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω–∞"
                placeholderTextColor={colors.muted}
                multiline
                numberOfLines={3}
                textAlignVertical="top"
              />
            </View>
            
            <Text style={[styles.disclaimer, { color: colors.muted }]}>
              *–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            </Text>
            
            <Pressable
              style={[styles.submitButton, { backgroundColor: colors.tint }]}
              onPress={handleSubmit}
              disabled={isLoading}
            >
              {isLoading ? (
                <ActivityIndicator size="small" color="white" />
              ) : (
                <>
                  <MaterialIcons name="send" size={18} color="white" />
                  <Text style={styles.submitButtonText}>–û—Ç–ø—Ä–∞–≤–∏—Ç—å</Text>
                </>
              )}
            </Pressable>
          </ScrollView>
        </View>
      </KeyboardAvoidingView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: 'white',
    paddingTop: Platform.OS === 'android' ? StatusBar.currentHeight : 0,
  },
  keyboardView: {
    flex: 1,
  },
  modalContent: {
    flex: 1,
    paddingHorizontal: 16,
    paddingBottom: Platform.OS === 'ios' ? 40 : 16,
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: 16,
  },
  title: {
    fontSize: 20,
    fontWeight: '700',
  },
  subtitle: {
    fontSize: 14,
    lineHeight: 20,
    marginBottom: 24,
  },
  scrollView: {
    flex: 1,
  },
  formContainer: {
    paddingBottom: 24,
  },
  formGroup: {
    marginBottom: 20,
  },
  label: {
    fontSize: 14,
    fontWeight: '600',
    marginBottom: 8,
  },
  input: {
    borderWidth: 1,
    borderRadius: 8,
    height: 48,
    paddingHorizontal: 12,
    fontSize: 16,
  },
  textArea: {
    height: 100,
    paddingTop: 12,
  },
  typeButtons: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    marginTop: 8,
  },
  typeButton: {
    flexDirection: 'row',
    alignItems: 'center',
    borderWidth: 1,
    borderColor: '#CCCCCC',
    borderRadius: 8,
    paddingVertical: 8,
    paddingHorizontal: 12,
    marginRight: 8,
    marginBottom: 8,
  },
  activeTypeButton: {
    borderWidth: 2,
  },
  typeButtonText: {
    fontSize: 14,
    marginLeft: 4,
  },
  errorText: {
    fontSize: 12,
    marginTop: 4,
  },
  disclaimer: {
    fontSize: 12,
    marginBottom: 24,
  },
  submitButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    height: 48,
    borderRadius: 8,
  },
  submitButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: '600',
    marginLeft: 8,
  },
  sectionHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: 16,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: '700',
  },
  requiredInfoText: {
    fontSize: 12,
  },
  optionalInfoText: {
    fontSize: 12,
  },
}); 