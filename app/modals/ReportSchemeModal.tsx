import React, { useState } from 'react';
import { 
  StyleSheet, 
  View, 
  Text, 
  TextInput, 
  Pressable, 
  ScrollView, 
  KeyboardAvoidingView, 
  Platform,
  ActivityIndicator,
  Alert,
  SafeAreaView,
  StatusBar
} from 'react-native';
import { useRouter } from 'expo-router';
import { MaterialIcons } from '@expo/vector-icons';
import { Colors } from '@/constants/Colors';
import { schemesApi } from '@/app/services/api';

const ERROR_COLOR = '#FF3B30'; 

export default function ReportSchemeModal() {
  const colors = Colors.light;
  const [isLoading, setIsLoading] = useState(false);
  const router = useRouter();
  
  const [reporterInfo, setReporterInfo] = useState({
    fullName: '',
    contactPhone: '',
    email: '',
    isVictim: false
  });
  
  const [schemeDetails, setSchemeDetails] = useState({
    title: '',
    description: '',
    scammerInfo: '',
    location: '',
    financialLoss: ''
  });
  
  const [errors, setErrors] = useState<{[key: string]: string}>({});
  
  const validateForm = () => {
    const newErrors: {[key: string]: string} = {};
    
    if (!reporterInfo.fullName.trim()) {
      newErrors.fullName = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è';
    }
    
    if (!reporterInfo.contactPhone.trim()) {
      newErrors.contactPhone = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω';
    }
    
    if (!schemeDetails.title.trim()) {
      newErrors.title = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ö–µ–º—ã';
    }
    
    if (!schemeDetails.description.trim()) {
      newErrors.description = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ';
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };
  
  const handleSubmit = async () => {
    if (!validateForm()) {
      return;
    }
    
    setIsLoading(true);
    
    try {
      const requestId = Date.now().toString(36) + Math.random().toString(36).substring(2);
      console.log(`üöÄ Submitting scheme report (ID: ${requestId})`);
      
      const financialLoss = schemeDetails.financialLoss.trim() 
        ? parseInt(schemeDetails.financialLoss) 
        : undefined;
      
      const schemeData = {
        reporterInfo: {
          ...reporterInfo,
          _requestId: requestId
        },
        schemeDetails: {
          ...schemeDetails,
          financialLoss,
          dateOccurred: new Date()
        }
      };
      
      console.log(`üì§ Sending scheme data (ID: ${requestId}):`, schemeData);
      const response = await schemesApi.reportScheme(schemeData);
      console.log(`üì• Received scheme response (ID: ${requestId}):`, response);
      
      setIsLoading(false);
      
      // Handle different response formats
      const message = response.message || '–û—Ç—á–µ—Ç –æ —Å—Ö–µ–º–µ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.';
      
      Alert.alert(
        '–û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω',
        message,
        [
          { 
            text: 'OK', 
            onPress: () => {
              resetForm();
              router.back();
            }
          }
        ]
      );
    } catch (error: any) {
      console.error('Error reporting scheme:', error);
      setIsLoading(false);
      
      // More detailed error handling
      let errorMessage = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
      
      if (error.response) {
        // The request was made and the server responded with an error status code
        console.error('Server responded with error:', error.response.status, error.response.data);
        errorMessage = `–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${error.response.status}. ${error.response.data?.message || ''}`;
      } else if (error.request) {
        // The request was made but no response was received - network error
        console.error('Network error - no response:', error.request);
        errorMessage = '–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω.';
      } else {
        // Something happened in setting up the request
        console.error('Request setup error:', error.message);
        errorMessage = `–û—à–∏–±–∫–∞: ${error.message}`;
      }
      
      Alert.alert(
        '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏',
        errorMessage,
        [{ text: 'OK' }]
      );
    }
  };
  
  const resetForm = () => {
    setReporterInfo({
      fullName: '',
      contactPhone: '',
      email: '',
      isVictim: false
    });
    
    setSchemeDetails({
      title: '',
      description: '',
      scammerInfo: '',
      location: '',
      financialLoss: ''
    });
    
    setErrors({});
  };
  
  const handleClose = () => {
    resetForm();
    router.back();
  };
  
  return (
    <SafeAreaView style={styles.container}>
      <StatusBar barStyle="dark-content" />
      <KeyboardAvoidingView
        style={styles.keyboardView}
        behavior={Platform.OS === 'ios' ? 'padding' : undefined}
      >
        <View style={[styles.modalContent, { backgroundColor: colors.background }]}>
          <View style={styles.header}>
            <Text style={[styles.title, { color: colors.text }]}>
              –°–æ–æ–±—â–∏—Ç—å –æ —Å—Ö–µ–º–µ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞
            </Text>
            <Pressable onPress={handleClose}>
              <MaterialIcons name="close" size={24} color={colors.text} />
            </Pressable>
          </View>
          
          <ScrollView style={styles.scrollView} contentContainerStyle={styles.formContainer}>
            <Text style={[styles.subtitle, { color: colors.muted }]}>
              –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É, —á—Ç–æ–±—ã —Å–æ–æ–±—â–∏—Ç—å –æ —Å—Ö–µ–º–µ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞. –í–∞—à –æ—Ç—á–µ—Ç –ø–æ–º–æ–∂–µ—Ç –¥—Ä—É–≥–∏–º –≥—Ä–∞–∂–¥–∞–Ω–∞–º –∏–∑–±–µ–∂–∞—Ç—å –æ–±–º–∞–Ω–∞.
            </Text>
            
            <View style={styles.sectionHeader}>
              <Text style={[styles.sectionTitle, { color: colors.text }]}>
                –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—è–≤–∏—Ç–µ–ª–µ
              </Text>
            </View>
            
            <View style={styles.formGroup}>
              <Text style={[styles.label, { color: colors.text }]}>
                –í–∞—à–µ –∏–º—è*
              </Text>
              <TextInput
                style={[
                  styles.input, 
                  { 
                    borderColor: errors.fullName ? ERROR_COLOR : colors.border,
                    color: colors.text,
                    backgroundColor: colors.subtleBg
                  }
                ]}
                value={reporterInfo.fullName}
                onChangeText={(text) => setReporterInfo({...reporterInfo, fullName: text})}
                placeholder="–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω"
                placeholderTextColor={colors.muted}
              />
              {errors.fullName && (
                <Text style={[styles.errorText, { color: ERROR_COLOR }]}>
                  {errors.fullName}
                </Text>
              )}
            </View>
            
            <View style={styles.formGroup}>
              <Text style={[styles.label, { color: colors.text }]}>
                –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω*
              </Text>
              <TextInput
                style={[
                  styles.input, 
                  { 
                    borderColor: errors.contactPhone ? ERROR_COLOR : colors.border,
                    color: colors.text,
                    backgroundColor: colors.subtleBg
                  }
                ]}
                value={reporterInfo.contactPhone}
                onChangeText={(text) => setReporterInfo({...reporterInfo, contactPhone: text})}
                placeholder="+7 (XXX) XXX-XXXX"
                placeholderTextColor={colors.muted}
                keyboardType="phone-pad"
              />
              {errors.contactPhone && (
                <Text style={[styles.errorText, { color: ERROR_COLOR }]}>
                  {errors.contactPhone}
                </Text>
              )}
            </View>
            
            <View style={styles.formGroup}>
              <Text style={[styles.label, { color: colors.text }]}>
                Email (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
              </Text>
              <TextInput
                style={[
                  styles.input, 
                  { 
                    borderColor: colors.border,
                    color: colors.text,
                    backgroundColor: colors.subtleBg
                  }
                ]}
                value={reporterInfo.email}
                onChangeText={(text) => setReporterInfo({...reporterInfo, email: text})}
                placeholder="example@email.com"
                placeholderTextColor={colors.muted}
                keyboardType="email-address"
                autoCapitalize="none"
              />
            </View>
            
            <View style={styles.formGroup}>
              <Pressable 
                style={styles.checkboxContainer}
                onPress={() => setReporterInfo({...reporterInfo, isVictim: !reporterInfo.isVictim})}
              >
                <View style={[
                  styles.checkbox, 
                  { 
                    borderColor: colors.border,
                    backgroundColor: reporterInfo.isVictim ? colors.tint : 'transparent' 
                  }
                ]}>
                  {reporterInfo.isVictim && (
                    <MaterialIcons name="check" size={16} color="white" />
                  )}
                </View>
                <Text style={[styles.checkboxLabel, { color: colors.text }]}>
                  –Ø —Å—Ç–∞–ª(–∞) –∂–µ—Ä—Ç–≤–æ–π —ç—Ç–æ–≥–æ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞
                </Text>
              </Pressable>
            </View>
            
            <View style={styles.sectionHeader}>
              <Text style={[styles.sectionTitle, { color: colors.text }]}>
                –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ö–µ–º–µ
              </Text>
            </View>
            
            <View style={styles.formGroup}>
              <Text style={[styles.label, { color: colors.text }]}>
                –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ö–µ–º—ã*
              </Text>
              <TextInput
                style={[
                  styles.input, 
                  { 
                    borderColor: errors.title ? ERROR_COLOR : colors.border,
                    color: colors.text,
                    backgroundColor: colors.subtleBg
                  }
                ]}
                value={schemeDetails.title}
                onChangeText={(text) => setSchemeDetails({...schemeDetails, title: text})}
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –§–∞–ª—å—à–∏–≤—ã–µ –°–ú–° –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –∫–∞—Ä—Ç—ã"
                placeholderTextColor={colors.muted}
              />
              {errors.title && (
                <Text style={[styles.errorText, { color: ERROR_COLOR }]}>
                  {errors.title}
                </Text>
              )}
            </View>
            
            <View style={styles.formGroup}>
              <Text style={[styles.label, { color: colors.text }]}>
                –û–ø–∏—Å–∞–Ω–∏–µ —Å—Ö–µ–º—ã*
              </Text>
              <TextInput
                style={[
                  styles.input, 
                  styles.textArea,
                  { 
                    borderColor: errors.description ? ERROR_COLOR : colors.border,
                    color: colors.text,
                    backgroundColor: colors.subtleBg
                  }
                ]}
                value={schemeDetails.description}
                onChangeText={(text) => setSchemeDetails({...schemeDetails, description: text})}
                placeholder="–û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ö–µ–º–∞ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞"
                placeholderTextColor={colors.muted}
                multiline
                numberOfLines={5}
                textAlignVertical="top"
              />
              {errors.description && (
                <Text style={[styles.errorText, { color: ERROR_COLOR }]}>
                  {errors.description}
                </Text>
              )}
            </View>
            
            <View style={styles.formGroup}>
              <Text style={[styles.label, { color: colors.text }]}>
                –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ—à–µ–Ω–Ω–∏–∫–µ (–µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω–æ)
              </Text>
              <TextInput
                style={[
                  styles.input, 
                  { 
                    borderColor: colors.border,
                    color: colors.text,
                    backgroundColor: colors.subtleBg
                  }
                ]}
                value={schemeDetails.scammerInfo}
                onChangeText={(text) => setSchemeDetails({...schemeDetails, scammerInfo: text})}
                placeholder="–ò–º—è, –∫–æ–Ω—Ç–∞–∫—Ç—ã, –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∏ —Ç.–¥."
                placeholderTextColor={colors.muted}
              />
            </View>
            
            <View style={styles.formGroup}>
              <Text style={[styles.label, { color: colors.text }]}>
                –ú–µ—Å—Ç–æ –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏—è
              </Text>
              <TextInput
                style={[
                  styles.input, 
                  { 
                    borderColor: colors.border,
                    color: colors.text,
                    backgroundColor: colors.subtleBg
                  }
                ]}
                value={schemeDetails.location}
                onChangeText={(text) => setSchemeDetails({...schemeDetails, location: text})}
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –≥. –ê–ª–º–∞—Ç—ã –∏–ª–∏ –æ–Ω–ª–∞–π–Ω"
                placeholderTextColor={colors.muted}
              />
            </View>
            
            <View style={styles.formGroup}>
              <Text style={[styles.label, { color: colors.text }]}>
                –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ—Ç–µ—Ä–∏ (–µ—Å–ª–∏ –±—ã–ª–∏, –≤ —Ç–µ–Ω–≥–µ)
              </Text>
              <TextInput
                style={[
                  styles.input, 
                  { 
                    borderColor: colors.border,
                    color: colors.text,
                    backgroundColor: colors.subtleBg
                  }
                ]}
                value={schemeDetails.financialLoss}
                onChangeText={(text) => {
                  // Allow only numbers
                  const numericValue = text.replace(/[^0-9]/g, '');
                  setSchemeDetails({...schemeDetails, financialLoss: numericValue});
                }}
                placeholder="0"
                placeholderTextColor={colors.muted}
                keyboardType="number-pad"
              />
            </View>
            
            <Text style={[styles.disclaimer, { color: colors.muted }]}>
              *–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            </Text>
            
            <Pressable
              style={[styles.submitButton, { backgroundColor: colors.tint }]}
              onPress={handleSubmit}
              disabled={isLoading}
            >
              {isLoading ? (
                <ActivityIndicator size="small" color="white" />
              ) : (
                <>
                  <MaterialIcons name="send" size={18} color="white" />
                  <Text style={styles.submitButtonText}>–û—Ç–ø—Ä–∞–≤–∏—Ç—å</Text>
                </>
              )}
            </Pressable>
          </ScrollView>
        </View>
      </KeyboardAvoidingView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: 'white',
    paddingTop: Platform.OS === 'android' ? StatusBar.currentHeight : 0,
  },
  keyboardView: {
    flex: 1,
  },
  modalContent: {
    flex: 1,
    paddingHorizontal: 16,
    paddingBottom: Platform.OS === 'ios' ? 40 : 16,
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: 16,
  },
  title: {
    fontSize: 20,
    fontWeight: '700',
  },
  subtitle: {
    fontSize: 14,
    lineHeight: 20,
    marginBottom: 24,
  },
  scrollView: {
    flex: 1,
  },
  formContainer: {
    paddingBottom: 24,
  },
  formGroup: {
    marginBottom: 20,
  },
  label: {
    fontSize: 14,
    fontWeight: '600',
    marginBottom: 8,
  },
  input: {
    borderWidth: 1,
    borderRadius: 8,
    height: 48,
    paddingHorizontal: 12,
    fontSize: 16,
  },
  textArea: {
    height: 100,
    paddingTop: 12,
  },
  sectionHeader: {
    marginTop: 8,
    marginBottom: 16,
    paddingBottom: 8,
    borderBottomWidth: 1,
    borderBottomColor: '#EEEEEE',
  },
  sectionTitle: {
    fontSize: 16,
    fontWeight: '700',
  },
  checkboxContainer: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  checkbox: {
    width: 22,
    height: 22,
    borderWidth: 2,
    borderRadius: 4,
    marginRight: 8,
    alignItems: 'center',
    justifyContent: 'center',
  },
  checkboxLabel: {
    fontSize: 14,
  },
  errorText: {
    fontSize: 12,
    marginTop: 4,
  },
  disclaimer: {
    fontSize: 12,
    marginBottom: 24,
  },
  submitButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    height: 48,
    borderRadius: 8,
  },
  submitButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: '600',
    marginLeft: 8,
  },
}); 